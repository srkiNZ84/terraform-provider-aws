---
subcategory: "Lex V2 Models"
layout: "aws"
page_title: "AWS: aws_lexv2models_slot"
description: |-
  Terraform resource for managing an AWS Lex V2 Models Slot.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lexv2models_slot

Terraform resource for managing an AWS Lex V2 Models Slot.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Lexv2ModelsSlot } from "./.gen/providers/aws/lexv2-models-slot";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new Lexv2ModelsSlot(this, "example", {
      botId: Token.asString(awsLexv2ModelsBotExample.id),
      botVersion: Token.asString(awsLexv2ModelsBotVersionExample.botVersion),
      intentId: Token.asString(awsLexv2ModelsIntentExample.id),
      localeId: Token.asString(awsLexv2ModelsBotLocaleExample.localeId),
      name: "example",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `botId` - (Required) Identifier of the bot associated with the slot.
* `botVersion` - (Required) Version of the bot associated with the slot.
* `intentId` - (Required) Identifier of the intent that contains the slot.
* `localeId` - (Required) Identifier of the language and locale that the slot will be used in.
* `name` - (Required) Name of the slot.
* `valueElicitationSetting` - (Required) Prompts that Amazon Lex sends to the user to elicit a response that provides the value for the slot.

The following arguments are optional:

* `description` - (Optional) Description of the slot.
* `multipleValuesSetting` - (Optional) Whether the slot returns multiple values in one response. See the [`multipleValuesSetting` argument reference](#multiple_values_setting-argument-reference) below.
* `obfuscationSetting` - (Optional) Determines how slot values are used in Amazon CloudWatch logs. See the [`obfuscationSetting` argument reference](#obfuscation_setting-argument-reference) below.
* `slotTypeId` - (Optional) Unique identifier for the slot type associated with this slot.
* `sub_slot_setting` - (Optional) Specifications for the constituent sub slots and the expression for the composite slot.

### `multipleValuesSetting` Argument Reference

* `allowMultipleValues` - (Optional) Whether a slot can return multiple values. When `true`, the slot may return more than one value in a response. When `false`, the slot returns only a single value. Multi-value slots are only available in the `en-US` locale.

### `obfuscationSetting` Argument Reference

* `obfuscationSettingType` - (Required) Whether Amazon Lex obscures slot values in conversation logs. Valid values are `DefaultObfuscation` and `None`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - A comma-delimited string concatenating `botId`, `botVersion`, `intentId`, `localeId`, and `slotId`.
* `slotId` - Unique identifier associated with the slot.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lex V2 Models Slot using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Lexv2ModelsSlot } from "./.gen/providers/aws/lexv2-models-slot";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Lexv2ModelsSlot.generateConfigForImport(
      this,
      "example",
      "bot-1234,1,intent-5678,en-US,slot-9012"
    );
  }
}

```

Using `terraform import`, import Lex V2 Models Slot using the `id`. For example:

```console
% terraform import aws_lexv2models_slot.example bot-1234,1,intent-5678,en-US,slot-9012
```

<!-- cache-key: cdktf-0.20.1 input-cc601a6503397999e8f928de214fd706c67dee8ddb04fcb1b1da6c645607f7f5 -->