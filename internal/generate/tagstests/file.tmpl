// Code generated by internal/generate/tagstests/main.go; DO NOT EDIT.

{{ define "Init" }}
	ctx := acctest.Context(t)
	{{ if .ExistsTypeName -}}
	var v {{ .ExistsTypeName }}
	{{- end }}
	resourceName := "{{ .TypeName}}.test"
	{{ if .Generator -}}
	rName := {{ .Generator }}
	{{ else -}}
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
	{{- end }}
{{ end }}

{{ define "TestCaseSetup" -}}
	PreCheck:                 func() { acctest.PreCheck(ctx, t) },
	ErrorCheck:               acctest.ErrorCheck(t, names.{{ .ProviderNameUpper }}ServiceID),
	ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
	CheckDestroy:             testAccCheck{{ .Name }}Destroy(ctx),
{{- end }}

{{ define "Import" }}
{
	ResourceName:      resourceName,
	ImportState:       true,
	ImportStateVerify: true,
	{{ if gt (len .) 0 -}}
	ImportStateVerifyIgnore: []string{
	{{ range $i, $v := . }}"{{ $v }}",{{ end }}
	},
	{{- end }}
},
{{ end }}

package {{ .ProviderPackage }}_test

import (
	"testing"

    {{ if .ExistsTypePackage -}}
	"{{ .ExistsTypePackage }}"
    {{- end }}
    {{- if eq .Generator "" }}
 	sdkacctest "github.com/hashicorp/terraform-plugin-testing/helper/acctest"
 	{{- end }}
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
	"github.com/hashicorp/terraform-provider-aws/names"
)

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ .Name }}Config_tags1(rName, "key1", "value1"),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: testAcc{{ .Name }}Config_tags2(rName, "key1", "value1updated", "key2", "value2"),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags.key2", "value2"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: testAcc{{ .Name }}Config_tags1(rName, "key2", "value2"),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key2", "value2"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: testAcc{{ .Name }}Config_tags0(rName),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_null(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ .Name }}Config_tagsNull(rName, "key1"),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config:             testAcc{{ .Name }}Config_tags0(rName),
				PlanOnly:           true,
                ExpectNonEmptyPlan: false,
			},
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_AddOnUpdate(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ .Name }}Config_tags0(rName),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
				),
			},
			{
				Config: testAcc{{ .Name }}Config_tags1(rName, "key1", "value1"),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_EmptyTag_OnCreate(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ .Name }}Config_tags1(rName, "key1", ""),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", ""),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: testAcc{{ .Name }}Config_tags0(rName),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_EmptyTag_OnUpdate_Add(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ .Name }}Config_tags1(rName, "key1", "value1"),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				Config: testAcc{{ .Name }}Config_tags2(rName, "key1", "value1", "key2", ""),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key2", ""),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: testAcc{{ .Name }}Config_tags1(rName, "key1", "value1"),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_EmptyTag_OnUpdate_Replace(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ .Name }}Config_tags1(rName, "key1", "value1"),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				Config: testAcc{{ .Name }}Config_tags1(rName, "key1", ""),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", ""),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_DefaultTags_providerOnly(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags1("key1", "value1"),
					testAcc{{ .Name }}Config_tags0(rName),
				),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags2("key1", "value1updated", "key2", "value2"),
					testAcc{{ .Name }}Config_tags0(rName),
				),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key2", "value2"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags1("key2", "value2"),
					testAcc{{ .Name }}Config_tags0(rName),
				),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key2", "value2"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags0(),
					testAcc{{ .Name }}Config_tags0(rName),
				),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "0"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_DefaultTags_nonOverlapping(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags1("providerkey1", "providervalue1"),
					testAcc{{ .Name }}Config_tags1(rName, "resourcekey1", "resourcevalue1"),
				),
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.resourcekey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.providerkey1", "providervalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.resourcekey1", "resourcevalue1"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags1("providerkey1", "providervalue1updated"),
					testAcc{{ .Name }}Config_tags2(rName, "resourcekey1", "resourcevalue1updated", "resourcekey2", "resourcevalue2"),
				),
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags.resourcekey1", "resourcevalue1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags.resourcekey2", "resourcevalue2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "3"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.providerkey1", "providervalue1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.resourcekey1", "resourcevalue1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.resourcekey2", "resourcevalue2"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags0(),
					testAcc{{ .Name }}Config_tags0(rName),
				),
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "0"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_DefaultTags_overlapping(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags1("overlapkey1", "providervalue1"),
					testAcc{{ .Name }}Config_tags1(rName, "overlapkey1", "resourcevalue1"),
				),
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey1", "resourcevalue1"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags2("overlapkey1", "providervalue1", "overlapkey2", "providervalue2"),
					testAcc{{ .Name }}Config_tags2(rName, "overlapkey1", "resourcevalue1", "overlapkey2", "resourcevalue2"),
				),
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey2", "resourcevalue2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey2", "resourcevalue2"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags1("overlapkey1", "providervalue1"),
					testAcc{{ .Name }}Config_tags1(rName, "overlapkey1", "resourcevalue2"),
				),
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey1", "resourcevalue2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey1", "resourcevalue2"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_DefaultTags_updateToProviderOnly(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ .Name }}Config_tags1(rName, "key1", "value1"),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags1("key1", "value1"),
					testAcc{{ .Name }}Config_tags0(rName),
				),
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_DefaultTags_updateToResourceOnly(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags1("key1", "value1"),
					testAcc{{ .Name }}Config_tags0(rName),
				),
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				Config: testAcc{{ .Name }}Config_tags1(rName, "key1", "value1"),
				Check:  resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_DefaultTags_emptyResourceTag(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags1("key1", "value1"),
					testAcc{{ .Name }}Config_tags1(rName, "key1", ""),
				),
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", ""),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", ""),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_DefaultTags_nullOverlappingResourceTag(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags1("key1", "providervalue1"),
					testAcc{{ .Name }}Config_tagsNull(rName, "key1"),
				),
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "providervalue1"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}

func TestAcc{{ .ProviderNameUpper }}{{ .Name }}_tags_DefaultTags_nullNonOverlappingResourceTag(t *testing.T) {
	{{- template "Init" . }}

	resource.ParallelTest(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				Config: acctest.ConfigCompose(
					acctest.ConfigDefaultTags_Tags1("providerkey1", "providervalue1"),
					testAcc{{ .Name }}Config_tagsNull(rName, "resourcekey1"),
				),
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheck{{ .Name }}Exists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.providerkey1", "providervalue1"),
				),
			},
			{{- template "Import" .ImportIgnore -}}
		},
	})
}
